/**
 *  @license
 *    Copyright 2017 Brigham Young University
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 **/
'use strict';
const crypto            = require('crypto');

exports.addQueryParameter = function(url, key, value) {
    return url + (url.indexOf('?') === -1 ? '?' : '&') + key + (arguments.length > 2 ? '=' + value : '');
};

exports.addUrlState = function(url, state) {
    return exports.addQueryParameter(url, 'state', exports.encodeState(state));
};

exports.base64DecodeData = function(data) {
    return exports.parseJson(Buffer.from(data, 'base64').toString());
};

exports.base64EncodeData = function(data) {
    return Buffer.from(JSON.stringify(data)).toString('base64');
};

exports.getCurrentUrl = function(req, config) {
    return this.getHost(config, req) + req.originalUrl;
};

exports.getHost = function(config, req) {
    if (config.host) return config.host;
    const protocol = req.headers['x-forwarded-proto'] || req.protocol;
    let host = req.get('host');
    if (req.headers['x-forwarded-port']) {
        host = host.split(':')[0] + ':' + req.headers['x-forwarded-port'];
    }
    return protocol + '://' + host;
};

exports.decodeState = function(data) {
    try {
        return JSON.parse(exports.base64DecodeData(data));
    } catch (e) {
        return {};
    }
};

exports.decrypt = function (secret, text){
    const decipher = crypto.createDecipher('aes128', secret);
    return decipher.update(text,'hex','utf8') + decipher.final('utf8');
};

exports.encodeState = function(state) {
    return exports.base64EncodeData(JSON.stringify(state));
};

exports.encrypt = function (secret, text){
    const cipher = crypto.createCipher('aes128', secret);
    return cipher.update(text,'utf8','hex') + cipher.final('hex');
};

exports.isValidUrl = function(url) {
    return exports.rxUrl.test(url);
};

exports.objectLowerCaseProperties = function(obj) {
    const result = {};
    Object.keys(obj).forEach(key => {
        result[key.toLowerCase()] = obj[key];
    });
    return result;
};

exports.parseJson = function(str) {
    try {
        return JSON.parse(str);
    } catch (e) {
        return null;
    }
};

exports.removeQueryParameter = function(url, name) {
    const parts = url.split('?');
    const qs = parts[1];
    if (!qs) return url;

    const params = qs
        .split('&')
        .filter(set => set.split('=')[0] !== name);
    return parts[0] + (params.length > 0 ? '?' + params.join('&') : '');
};

exports.resolveUrl = function(host, url) {
    return exports.rxUrl.test(url) ? url : host + '/' + exports.trimSlashLeft(url);
};

exports.resolvePath = function(url) {
    return '/' + exports.trimSlashes(url);
};

exports.rxUrl = /^https?:\/\/[\s\S]{1,}?(?::\d+)?(?:\/[\s\S]+?)?$/;

exports.trimSlashLeft = function(value) {
    return value.replace(/^\//, '');
};

exports.trimSlashRight = function (value) {
    return value.replace(/\/$/, '');
};

exports.trimSlashes = function(value) {
    return exports.trimSlashLeft(exports.trimSlashRight(value));
};

exports.wait = function(duration) {
    return new Promise(resolve => {
        setTimeout(resolve, duration);
    });
};

exports.wellKnownUrl = 'https://api.byu.edu/.well-known/openid-configuration';