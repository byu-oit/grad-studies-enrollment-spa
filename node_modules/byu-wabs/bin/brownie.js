/**
 *  @license
 *    Copyright 2017 Brigham Young University
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 **/
'use strict';
const debug         = require('debug')('wabs:brownie');
const request       = require('./request');

const brownieUrl = 'https://lambda.byu.edu/ae/prod/brownie-dumper/cgi/brownie-dumper.cgi/json';

exports.decode = encodedBrownie => {
    debug('decoding brownie');
    return request('GET', brownieUrl + '?brownie=' + encodedBrownie, { 'Accept': 'application/json' })
        .then(response => getDecodedBrownieFromResponse(response));
};

exports.encode = data => {
    debug('encoding brownie');
    const body = Object.assign({ brownie: data.__brownie ? data.__brownie.toString() : '' }, data);
    return request('POST', brownieUrl, { Accept: 'application/json', 'Content-Type': 'application/json' }, JSON.stringify(body))
        .then(response => getDecodedBrownieFromResponse(response))
};


function getDecodedBrownieFromResponse(response) {
    const result = {};

    // validate the response structure
    const data = parseJSON(response.body)['Brownie-dumperService'];
    if (!data || response.statusCode !== 200) throw Error('REST response has unexpected structure');

    // iterate through the response properties to build the new decoded brownie object
    if (data.response.properties) {
        data.response.properties.forEach(function(property) {
            let value = property.value;

            //convert strings to the type specified
            if (typeof value === 'string') {
                switch (property.type) {
                    case 'DECIMAL':
                        value = parseFloat(value) || null;
                        break;
                    case 'INTEGER':
                        value = parseInt(value) || null;
                        break;
                }
            }

            //store the property on the result
            result[property.name] = value;
        });
    }

    // return the result
    return result;
}

function parseJSON(value) {
    try {
        return JSON.parse(value);
    } catch (err) {
        return {};
    }
}