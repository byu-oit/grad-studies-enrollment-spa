/**
 *  @license
 *    Copyright 2017 Brigham Young University
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 **/
'use strict';
const protocols = {
    http:           require('http'),
    https:          require('https')
};

const rxUrl = /^(https?):\/\/([\s\S]+?)(?::(\d+))?([/|?][\s\S]+?)?$/;

module.exports = request;

/**
 * Make a web request.
 * @param {string} method
 * @param {string} url
 * @param {object} [headers]
 * @param {string} [body]
 * @returns {Promise<{body: string, statusCode: number, headers: Object}>}
 */
function request(method, url, headers, body) {
    return new Promise((resolve, reject) => {
        const match = rxUrl.exec(url);
        if (!match) return reject(Error('Invalid URL'));

        if (arguments.length === 3 && typeof arguments[2] === 'string') {
            body = arguments[2];
            headers = {};
        }

        const protocol = match[1];
        if (!protocols[protocol]) return reject(Error('Invalid protocol specified: ' + protocol));

        const config = {
            method: method.toUpperCase(),
            hostname: match[2],
            port: match[3] || match[1] === 'http' ? 80 : 443,
            path: match[4] || '/',
            headers: headers || {}
        };

        const req = protocols[protocol].request(config, res => {
            const result = {
                body: '',
                statusCode: res.statusCode,
                headers: res.headers
            };

            res.on('data', data => {
                result.body += data.toString();
            });

            res.on('end', () => {
                resolve(result);
            });
        });

        req.on('error', reject);

        if (body) req.write(body);
        req.end();
    });
}