/**
 *  @license
 *    Copyright 2017 Brigham Young University
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 **/
'use strict';
const Typed             = require('fully-typed');
const util              = require('./util');

exports.authenticated = Typed({
    type: Object,
    properties: {
        authenticate: {     // whether to start authentication for unauthenticated user
            type: Boolean,
            default: false
        }
    }
});

exports.config = Typed({
    type: Object,
    properties: {
        appName: {
            type: String,
            minLength: 1,
            required: true,
            validator: v => /^[A-Za-z0-9_-]+$/.test(v)
        },
        awsSsmConfig: {
            type: Object
        },
        casCallbackPath: {
            type: String,
            default: '/',
            transform: v => '/' + util.trimSlashes(v)
        },
        consumerKey: {      // oauth consumer key
            type: String,
            required: true
        },
        consumerSecret: {   // oauth consumer secret
            type: String,
            required: true
        },
        encryptSecret: {    // the seed for encrypting sensitive authorization data stored on the browser
            type: String,
            minLength: 40
        },
        host: {             // the protocol, domain, and port used to reach this server
            type: String,
            transform: util.trimSlashRight,
            validator: util.isValidUrl,
        },
        openProxy: {        // whether the client can make proxy requests indiscriminately - only enable this if your wso2 app permissions are property configured for each web service.
            type: Boolean,
            default: false
        },
        reservedPath: {
            type: String,
            transform: util.trimSlashRight,
            default: '/__wabs'
        },
        wso2CallbackPath: {
            type: String,
            default: '/',
            transform: v => '/' + util.trimSlashes(v)
        }
    }
});

exports.index = Typed({
    type: Object,
    properties: {
        brownie: {
            type: Boolean,
            default: true
        },
        injectScript: {
            type: Boolean,
            default: true
        },
        ignore: {
            type: Typed.OneOf,
            oneOf: [
                {
                    type: Array,
                    schema: {
                        validator: v => {
                            if (typeof v === 'string' || v instanceof RegExp) return true;
                            return 'Each html5Router ignored item must be a string or a regular expression.';
                        },
                        transform: v => {
                            if (typeof v === 'string') {
                                if (v[0] !== '/') v = '/' + v;
                                if (v[v.length - 1] === '/') v = v.substr(0, v.length - 1);
                                v = new RegExp('^' + v.replace(/\*/g, '(?:[\\s\\S]+?)') + '$');
                            }
                            return path => v.test(path);
                        }
                    }
                },
                {
                    type: Function,
                    transform: v => [ v ]
                }
            ]
        },
        render: {
            required: true,
            validator: function(value) {
                const type = typeof value;
                return type === 'string' || type === 'function';
            }
        },
        sync: {
            type: Boolean,
            default: true
        }
    }
});

exports.login = Typed({
    type: Object,
    properties: {
        failure: {
            type: String
        },
        gateway: {
            type: Boolean,
            default: false
        },
        success: {
            type: String,
            default: '/'
        },
        wso2: {
            type: Boolean,
            default: true
        }
    }
});

exports.logout = Typed({
    type: Object,
    properties: {
        cas: {
            type: Boolean,
            default: true
        },
        cFramework: {
            type: Boolean,
            default: true
        },
        redirect: {
            type: String,
            default: '/'
        },
        wso2: {
            type: Boolean,
            default: true
        }
    }
});
