/**
 *  @license
 *    Copyright 2017 Brigham Young University
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 **/
'use strict';
const cookieParser  = require('cookie-parser');
const express       = require('express');
const path          = require('path');
const Wabs          = require('../../index');

module.exports = function() {
    return new Promise((resolve, reject) => {
        const app = express();
        const wabs = Wabs(process.env.WABS_APP_NAME || 'wabs-demo');
        const www = path.resolve(__dirname, '../www');

        app.use((req, res, next) => {
            console.error(req.method + ' ' + req.originalUrl);
            next();
        });

        // serve static files
        app.use(express.static(www, { index: false }));

        // cookie parser needed for wabs init
        app.use(cookieParser(wabs.config.encryptSecret));

        // initialize wabs
        app.use(wabs.init());

        // add login and logout endpoints
        app.use('/login', wabs.login());
        app.use('/logout', wabs.logout());

        // set up a proxy route
        app.use('/proxy', wabs.clientGrantProxy('https://api.byu.edu:443/domains/legacy/academic/advisement/departmentlistpage/v1/documentation'));

        // auth sync, brownie management, and html5 routing for paths that should resolve to the index file
        app.use(wabs.index({ render: www + '/index.html' }));

        const listener = app.listen(8460, function(err) {
            if (err) {
                reject(err);
            } else {
                console.log('Server listening on port: 8460');
                resolve({
                    stop: () => new Promise((resolve, reject) => {
                        console.log('Stopping server');
                        listener.close(err => {
                            if (err) return reject(err);
                            resolve();
                        });
                    })
                });
            }
        });

        process.on('exit', () => listener.close()); // app is closing
        process.on('SIGINT', () => listener.close()); // catches ctrl+c event
        process.on('SIGBREAK', () => listener.close()); // catches Windows ctrl+c event
        process.on('SIGUSR1', () => listener.close()); // catches "kill pid"
        process.on('SIGUSR2', () => listener.close()); // catches "kill pid"

    });
};
