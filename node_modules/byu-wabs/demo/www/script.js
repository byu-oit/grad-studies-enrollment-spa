document.querySelector('#clientGrant').addEventListener('click', function() {
    const fn = function(res) {
        formatEcho('#client-grant-json', res);
    };
    axios({ method: 'get', url: '/proxy' }).then(fn, fn);
});

document.querySelector('#codeGrant').addEventListener('click', function() {
    const config = {
        method: 'get',
        url: 'https://api.byu.edu:443/domains/legacy/academic/advisement/departmentlistpage/v1/documentation'
    };
    if (byu.auth && byu.auth.accessToken) {
        config.headers = { Authorization: 'Bearer ' + byu.auth.accessToken };
    }

    const fn = function(res) {
        formatEcho('#code-grant-json', res);
    };
    axios(config).then(fn, fn);
});

document.querySelector('#brownie-submit').addEventListener('click', function() {
    byu.brownie['brownie_input'] = document.querySelector('#brownie-input').value;
    byu.navigateTo(window.location.href, '_blank');
});

document.querySelector('#refresh-token').addEventListener('click', function () {
    byu.auth.refreshToken(function (message, statusCode) {
        if (statusCode === 200) {
            toast(true, 'Success', 'Token refreshed successfully', 2000)
        } else {
            toast(false, 'Error', 'Token could not be refreshed', 4000)
        }
        authUpdate()
    })
});

authUpdate();

// set brownie data
document.querySelector('#brownie-input').value = byu.brownie['brownie_input'] || 'some data';
document.querySelector('#brownie-data').innerHTML = '<pre><code>' + JSON.stringify(byu.brownie, null, 2) + '</code></pre>';

document.addEventListener('wabs', function(event) {
    switch (event.detail.name) {
        case 'wabs-auth-login':
        case 'wabs-auth-logout':
            authUpdate();
            break;
    }
});

function authUpdate() {
    if (byu.auth) {
        const login = document.querySelector('#login');
        const logout = document.querySelector('#logout');

        login.style.display = byu.user ? 'none' : 'inline-block';
        logout.style.display = byu.user ? 'inline-block' : 'none';
        showJSON('#user-json', byu.user);
        showJSON('#token-data', byu.auth.accessToken
            ? { accessToken: byu.auth.accessToken, expires: byu.auth.expires.toLocaleString() }
            : null);
        document.querySelector('#auth-warning').style.display = byu.user ? 'none' : 'block';

        Array.from(document.querySelectorAll('.success'))
            .forEach(function(el) { el.style.opacity = '1'; });
        document.querySelector('#error').style.display = 'none';
    } else {
        document.querySelector('#error').style.opacity = '1';
        Array.from(document.querySelectorAll('.success'))
            .forEach(function(el) { el.style.display = 'none'; });
    }
}

function formatEcho(selector, v) {
    let str = '';
    str += '<div><strong>Request</strong></div><pre><code>';
    str += v.config.method.toUpperCase() + ' ' + v.config.url + '\n';
    Object.keys(v.config.headers).forEach(function(key) {
        str += key + ': ' + v.config.headers[key] + '\n';
    });
    str += '</code></pre>';

    str += '<div>&nbsp;</div>';
    str += '<div><strong>Response</strong></div>\n';
    if (v.status) {
        str += '<div>' + v.status + ' ' + v.statusText + '</div>';
    } else if (v.response) {
        str += '<div>' + v.response.status + ' ' + v.response.statusText + '</div>';
    } else {
        str += '<div>' + v.message + '</div>';
    }

    document.querySelector(selector).innerHTML = str;
}

function showJSON(selector, value) {
    document.querySelector(selector).innerHTML = "<pre><code>" + JSON.stringify(value, null, 2) + "</code></pre>";
}

function toast (success, title, message, duration) {
    const classNameBase = 'toast ' + (success ? 'success' : 'error');
    const ct = document.createElement('div');
    ct.className = classNameBase;
    ct.innerHTML = '<div class="toast-header"><strong class="mr-auto">' + title + '</strong></div>' +
        '<div class="toast-body">' + message + '</div>';
    document.body.appendChild(ct);
    setTimeout(function () {
        ct.className = classNameBase + ' show';
        setTimeout(function() {
            ct.className = classNameBase;
            setTimeout(function() {
                document.body.removeChild(ct)
            }, 300)
        }, duration)
    }, 50)
}
