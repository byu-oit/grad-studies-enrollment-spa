/**
 *  @license
 *    Copyright 2017 Brigham Young University
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 **/
'use strict';
const cookieParser  = require('cookie-parser');
const express       = require('express');
const path          = require('path');
const Wabs          = require('../../index');

module.exports = function(appName, appTitle, port) {
    return new Promise((resolve, reject) => {
        const app = express();
        const wabs = Wabs(appName);
        const www = path.resolve(__dirname, '../www');

        app.use((req, res, next) => {
            console.error(req.method + ' ' + req.originalUrl);
            next();
        });

        // serve static files
        app.use(express.static(www, { index: false }));

        // cookie parser needed for wabs init
        app.use(cookieParser(wabs.config.encryptSecret));

        // initialize wabs
        app.use(wabs.init());

        // endpoint protected, no CAS
        app.use('/protected/normal', wabs.authenticated(), (req, res) => {
            res.sendStatus(200);
        });

        app.use('/protected/login', wabs.authenticated({ authenticate: true }), (req, res) => {
            res.sendStatus(200);
        });

        app.use('/proxy', wabs.clientGrantProxy('https://api.byu.edu:443/domains/legacy/academic/advisement/departmentlistpage/v1/documentation'));

        app.use('/login', wabs.login());
        app.use('/logout', wabs.logout());

        // auth sync, brownie management, and html5 routing for paths that should resolve to the index file
        app.use(wabs.index(
            {
                render: function(req, callback) {
                    callback(null, `<!doctype html>
                        <html lang="en">
                        <head>
                          <meta charset="utf-8">
                          <title>${appTitle}</title>
                        </head>
                        <body>
                            <h1>${appTitle}</h1>
                        </body>
                    </html>`);
                }
            }
        ));

        const listener = app.listen(port, function(err) {
            if (err) {
                reject(err);
            } else {
                console.log('Server listening on port: ' + port);
                resolve({
                    stop: () => new Promise((resolve, reject) => {
                        console.log('Stopping server');
                        listener.close(err => {
                            if (err) return reject(err);
                            resolve();
                        });
                    })
                });
            }
        });

    });
};