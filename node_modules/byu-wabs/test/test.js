'use strict';
const AWS           = require('aws-sdk');
const expect        = require('chai').expect;
const puppeteer     = require('puppeteer');
const Server        = require('./server/server');

const homepage1 = 'http://localhost:8460/';
const homepage2 = 'http://localhost:8461/';

describe('wabs', function() {
    this.timeout(10000);
    let credentials;
    let server1;
    let server2;
    let browser;

    before(async () => {
        credentials = await getUserCredentials();
        server1 = await Server('wabs-demo', 'App 1', 8460);
        server2 = await Server('wabs-test', 'App 2', 8461);
        browser = await puppeteer.launch({ headless: false, devtools: process.env.DEVTOOLS === 'true', timeout: 0 });
    });

    after(async () => {
        browser.close();
        server1.stop();
        server2.stop();
    });

    describe('client-script', () => {

        before(() => casLogout(browser));

        it('byu.auth.login will log in', async () => {
            const page = await browser.newPage();
            await page.goto(homepage1);

            let user;
            user = await page.evaluate(() => byu.user);
            expect(user).to.be.null;

            page.evaluate(() => byu.auth.login());
            await page.waitForNavigation();
            await fillCasForm(page, credentials);

            await indexLoaded(page);
            user = await page.evaluate(() => byu.user);
            await page.close();

            expect(user).not.to.be.null;
            expect(user.netId).to.equal(credentials.netId);
        });

        it('byu.auth.refreshToken will get latest token', async () => {
            const page = await browser.newPage();
            await page.goto(homepage1);
            await indexLoaded(page);

            const token1 = await page.evaluate(() => byu.auth.accessToken);
            const token2 = await page.evaluate(() => {
                return new Promise(resolve => {
                    byu.auth.refreshToken(() => {
                        resolve(byu.auth.accessToken);
                    });
                });
            });
            await page.close();

            expect(token1.length).to.be.greaterThan(0);
            expect(token2.length).to.be.greaterThan(0);
        });

        it('byu.auth.logout will log out', async () => {
            const page = await browser.newPage();
            await page.goto(homepage1);

            let user;
            user = await page.evaluate(() => byu.user);
            expect(user).not.to.be.null;

            page.evaluate(() => byu.auth.logout());
            await page.waitForNavigation();
            await page.click('a');

            await indexLoaded(page);
            user = await page.evaluate(() => byu.user);
            await page.close();

            expect(user).to.be.null;
        });

        describe('multi-app authenticaton sync', () => {

            let page1, page2;

            before(async () => {
                await casLogout(browser);

                page1 = await browser.newPage();
                await page1.goto(homepage1);
                await indexLoaded(page1);

                page2 = await browser.newPage();
                await page2.goto(homepage2);
                await indexLoaded(page2);
            });

            after(async () => {
                await page1.close();
                await page2.close();
            });

            it('app1 not authenticated', async () => {
                const user = await page1.evaluate(() => byu.user);
                expect(user).to.be.null;
            });

            it('app2 not authenticated', async () => {
                const user = await page2.evaluate(() => byu.user);
                expect(user).to.be.null;
            });

            it('login with app1 also logs in app2', async () => {

                // set up login event listener on app2
                const promise = page2.evaluate(() => new Promise(resolve => document.addEventListener('wabs-auth-login', resolve)));

                // initialize login with app1
                page1.evaluate(() => byu.auth.login());
                await page1.waitForNavigation();
                await fillCasForm(page1, credentials);

                await promise;
                const user1 = page1.evaluate(() => byu.user);
                const user2 = page2.evaluate(() => byu.user);

                expect(user1).to.deep.equal(user2);
            });

            it('both apps have different access tokens', async () => {
                await delay(1000);
                const token1 = await page1.evaluate(() => byu.auth.accessToken);
                const token2 = await page2.evaluate(() => byu.auth.accessToken);
                expect(token1.length).to.be.greaterThan(0);
                expect(token2.length).to.be.greaterThan(0);
                expect(token1).not.to.equal(token2);
            });

            it('logout with app1 also logs in app2', async () => {

                // set up login event listener on app2
                const promise = page2.evaluate(() => new Promise(resolve => document.addEventListener('wabs-auth-logout', resolve)));
                await delay(1000);

                // initialize logout with app1
                await page1.bringToFront();
                page1.evaluate(() => byu.auth.logout());
                await clickCasLogoutRedirectLink(page1);
                await indexLoaded(page1);

                await page2.bringToFront();
                await delay(1000);
                await promise;
                const user1 = await page1.evaluate(() => byu.user);
                const user2 = await page2.evaluate(() => byu.user);
                const token1 = await page1.evaluate(() => byu.auth.accessToken);
                const token2 = await page2.evaluate(() => byu.auth.accessToken);

                expect(user1).to.be.null;
                expect(user2).to.be.null;
                expect(token1).to.be.undefined;
                expect(token2).to.be.undefined;
            });

            it('page init will trigger app1 and app2 auth sync', async () => {
                await casLogin(browser, credentials);

                const promise = page2.evaluate(() => new Promise(resolve => document.addEventListener('wabs-auth-login', resolve)));
                await delay(1000);

                // reload app 1 - will pick up that CAS has authenticated
                await page1.bringToFront();
                await page1.goto(homepage1);
                await indexLoaded(page1);

                await page2.bringToFront();
                await indexLoaded(page2);
                await delay(1000);
                await promise;
                const user1 = await page1.evaluate(() => byu.user);
                const user2 = await page2.evaluate(() => byu.user);
                const token1 = await page1.evaluate(() => byu.auth.accessToken);
                const token2 = await page2.evaluate(() => byu.auth.accessToken);

                await delay(2000);
                expect(user1).to.deep.equal(user2);
                expect(token1).not.to.be.undefined;
                expect(token2).not.to.be.undefined;
                expect(token1).not.to.equal(token2);
            });

        });

        it('byu.navigateTo will post a brownie to the specified url', async () => {
            const page = await browser.newPage();
            await page.goto(homepage1);
            await indexLoaded(page);

            await page.evaluate(homepage2 => {
                return new Promise((resolve, reject) => {
                    byu.brownie = { a: "1", b: "2" };
                    byu.navigateTo(homepage2, '_blank', function(err) {
                        if (err) return reject(err);
                        resolve();
                    });
                });
            }, homepage2);

            // wait until the second page has loaded
            const newPage = await waitUntil(2000, async (next, done) => {
                const results = await eachPage(browser, () => window.location.href);
                for (let i = 0; i < results.length; i++) {
                    if (results[i].result === homepage2) {
                        return done(null, results[i].page);
                    }
                }
                next();
            });
            await indexLoaded(newPage);

            const value = await newPage.evaluate(() => byu.brownie);
            await page.close();
            await newPage.close();

            expect(value.a).to.equal("1");
            expect(value.b).to.equal("2");
        });

    });

    describe('middleware', () => {

        describe('authenticated', () => {

            let page;

            before(async () => {
                await casLogout(browser);

                page = await browser.newPage();
                await page.goto(homepage1);
                await indexLoaded(page);
            });

            after(async () => {
                await page.close();
            });

            it('not authenticted gets 401', async () => {
                const page = await browser.newPage();
                const promise = onEvent(page, 'response');
                await page.goto(homepage1 + 'protected/normal');

                const response = await promise;
                await page.close();

                expect(response.status()).to.equal(401);
            });

            it('authenticted gets 200', async () => {
                await appLogin(browser, credentials);
                const page = await browser.newPage();

                const promise = onEvent(page, 'response');
                await page.goto(homepage1 + 'protected/normal');

                const response = await promise;
                await page.close();
                await casLogout(browser);

                expect(response.status()).to.equal(200);
            });
        });

        describe('init', () => {

            before(async () => {
                await casLogout(browser);
            });

            it('starts unauthenticated', async () => {
                const page = await browser.newPage();
                await page.goto(homepage1);
                const value = await page.evaluate (() => byu.user && byu.user.netId);
                await page.close();

                expect(value).to.be.null;
            });

            it('detects single sign in ', async () => {
                await casLogin(browser, credentials);

                const page = await browser.newPage();
                await page.goto(homepage1);
                await indexLoaded(page);
                const value = await page.evaluate (() => byu.user && byu.user.netId);
                await page.close();

                expect(value).to.equal(credentials.netId);
            });

            it('detects single sign out', async () => {
                await casLogout(browser);

                const page = await browser.newPage();
                await page.goto(homepage1);
                await indexLoaded(page);
                const value = await page.evaluate (() => byu.user && byu.user.netId);
                await page.close();

                expect(value).to.be.null;
            });

        });

        describe('index', () => {

            it('can receive brownie', async () => {

                // this encoded brownie has a property "test" set to value "test data"
                const brownie = "5a3086399344f7b576646477f8bc01ffe50999a0e0fc1cf3813aadee07952743bf9f2251a5ff84737b9012" +
                    "5cdc13f90efc336db3f6d9d316a5cb7b9862ea5d0b49c5c914765a8611f1132073a155229569dd7f49b1c9e26db0c71303" +
                    "b359a201e9b18942ac0a42647b04ad51d5183231d1ca13cd0824";

                const content = `<html>
                    <body>
                        <form action="${homepage1}" method="post">
                            <input type="hidden" name="brownie" value="${brownie}">
                            <input type="submit">
                        </form>
                    </body>
                </html>`;

                const page = await browser.newPage();
                await page.setContent(content);
                const submit = await page.$('input[type=submit]');
                submit.click();

                await page.waitForNavigation();
                await delay(1000);
                const value = await page.evaluate(() => byu.brownie);
                await page.close();

                expect(value.test).to.equal('test data');
            });



        });

    });

});

async function appLogin(browser, credentials) {
    const page = await browser.newPage();
    await page.goto(homepage1);

    page.evaluate(() => byu.auth.login());
    await page.waitForNavigation();
    await fillCasForm(page, credentials);

    await indexLoaded(page);
    await page.close();
}

// open a separate page, log in to cas, close page
async function casLogin(browser, credentials) {

    // load cas authentication page
    const page = await browser.newPage();
    await page.goto('https://cas.byu.edu/cas/login');

    // attempt login
    await fillCasForm(page, credentials);

    // close the page
    await page.close();
}

async function casLogout(browser) {
    const page = await browser.newPage();
    await page.goto('https://cas.byu.edu/cas/logout');
    await page.close();
}

async function clickCasLogoutRedirectLink(page) {
    await page.waitForFunction(() => window.location.href.indexOf('https://cas.byu.edu/cas/logout') === 0);
    await page.waitForFunction(() => document && document.querySelector('a'));
    await page.click('a');
}

function delay(duration) {
    return new Promise(resolve => {
        setTimeout(resolve, duration);
    });
}

async function eachPage(browser, callback) {
    const pages = await browser.pages();
    const promises = [];
    pages.forEach(page => {
        promises.push(page.evaluate(callback));
    });
    const results = await Promise.all(promises);
    return results.map((result, index) => {
        return {
            page: pages[index],
            result: result
        };
    });
}

async function fillCasForm(page, credentials) {

    // enter net id
    const netIdHandle = await page.$('#netid');
    await netIdHandle.type(credentials.netId);

    // enter password
    const passwordHandle = await page.$('#password');
    await passwordHandle.type(credentials.password);

    // submit form
    passwordHandle.press('Enter');
    await page.waitForNavigation();
}

function getUserCredentials() {
    return new Promise((resolve, reject) => {
        const ssm = new AWS.SSM({ region: 'us-west-2' });
        const params = {
            Name: 'wabs-oauth-test.dev.config',
            WithDecryption: true
        };
        ssm.getParameter(params, function(err, param) {
            if (err) {
                if (err.code === 'ExpiredTokenException') {
                    console.error('You are not currently logged into AWS via the terminal. Tests cannot be run.');
                }
                reject(err);
            }
            try {
                const data = JSON.parse(param.Parameter.Value);
                resolve({
                    netId: data.netId,
                    password: data.password
                });
            } catch (err) {
                reject(err);
            }
        });
    });
}

function indexLoaded(page) {
    return page.waitForFunction(() => typeof byu !== 'undefined');
}

function onEvent(emitter, name) {
    return new Promise(resolve => {
        emitter.on(name, function(event) {
            resolve(event);
        });
    });
}

function noop() {}

function waitUntil(ttl, callback) {
    if (typeof arguments[0] === 'function') {
        ttl = 0;
        callback = arguments[0];
    }

    const deferred = {};
    deferred.promise = new Promise((resolve, reject) => {
        deferred.resolve = resolve;
        deferred.reject = reject;
    });

    // if a ttl is specified then use it to eventually reject promise
    if (ttl > 0) setTimeout(() => {
        const err = Error('Function waitUntil reached ttl');
        err.code = 'ETTL';
        deferred.reject(err);
    }, ttl);

    function done(err, data) {
        if (err) return deferred.reject(err);
        deferred.resolve(data);
    }

    function next(wait) {
        if (arguments.length === 0) wait = 100;
        delay(wait)
            .then(run)
            .catch(deferred.reject);
    }

    function run() {
        try {
            callback(next, done);
        } catch (err) {
            deferred.reject(err);
        }
    }

    run();
    return deferred.promise;
}
